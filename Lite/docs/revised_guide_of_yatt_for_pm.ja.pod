# -*- coding: utf-8 -*-

=encoding utf-8

=head1 NAME

revised_guide_of_yatt_for_pm(ja) - Perl Monger のための YATT::Lite ガイド(改訂版)

=head1 INTRO

この文書では Perl Monger を対象に、YATT::Lite で
Web アプリを作る方法を解説します。解説は複数のツアーに別れており、
Hello world だけのツアーから初めて、外部モジュールの呼び出し、
テンプレートの部品化…と段階的に進みます。



=head1 TOUR1: Hello world!

=head2 Install YATT::Lite from github

説明を簡単にするため、一連のツアーは、github 上のインストーラを
直接使う方法を用います。

ターミナルを開いて、以下のようにインストーラを実行して下さい。

=code for sh

    $ mkdir -p ~/public_apps/app1 && cd ~/public_apps/app1   # or wherever.
    $ curl https://raw.githubusercontent.com/hkoba/yatt_lite/dev/scripts/skels/min/install.sh | bash
      % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                     Dload  Upload   Total   Spent    Left  Speed
    100  1274  100  1274    0     0   4425      0 --:--:-- --:--:-- --:--:--  4439
    Using remote git https://github.com/hkoba/yatt_lite.git
    # git init
    Initialized empty Git repository in /home/hkoba/public_apps/app1/.git/
    # mkdir -p lib
    # git submodule add https://github.com/hkoba/yatt_lite.git lib/YATT
    Cloning into 'lib/YATT'...
    remote: Counting objects: 5775, done.
    remote: Compressing objects: 100% (1488/1488), done.
    remote: Total 5775 (delta 4029), reused 5775 (delta 4029)
    Receiving objects: 100% (5775/5775), 1.32 MiB | 332.00 KiB/s, done.
    Resolving deltas: 100% (4029/4029), done.
    Checking connectivity... done.
    # cp -va lib/YATT/scripts/skels/min/approot/app.psgi lib/YATT/scripts/skels/min/approot/html .
    `lib/YATT/scripts/skels/min/approot/app.psgi' -> `./app.psgi'
    `lib/YATT/scripts/skels/min/approot/html' -> `./html'
    `lib/YATT/scripts/skels/min/approot/html/index.yatt' -> `./html/index.yatt'
    $

インストールが終わると、以下のようなディレクトリが出来上がるはずです。

    $ tree -L 2
    .
    ├── app.psgi
    ├── html
    │   └── index.yatt
    └── lib
        └── YATT
    
    3 directories, 2 files
    $

=over 4

=item * app.psgi は YATT::Lite (の WebMVC0::SiteApp) を用いた PSGI アプリです。
これを C<plackup> で起動すれば、テンプレートとして
F<*.yatt> を使える Web サーバーが動きます。

=item * F<html/> が document root になります。ファイル名を省略した場合は
F<index.yatt> がインデックスファイルとして表示されます。

=item * F<lib/> はこのアプリのためのモジュールを置く場所です。
F<lib/YATT> 以下には C<git submodule> として L<YATT::Lite>
の git リポジトリが登録されます。(symlink で共有することも可能です)

=back

=head2 Write your first Hello world!

好みのエディタで、 F<html/index.yatt> を以下のように編集してみて下さい。

=code for yatt

    <!yatt:args "/:foo" bar="?world" baz>
    <h2>Hello &yatt:foo; &yatt:bar;!</h2>
    &yatt:baz;

その上で、 C<plackup> でアプリを起動してから以下の URL をアクセス
してみて下さい。

=over 4

=item * L<http://0:5000/>

=item * L<http://0:5000/?bar=y>

=item * L<http://0:5000/foooo>

=item * L<http://0:5000/foooo?bar=z>

=item * L<http://0:5000/index.yatt/foooooooo?bar=baz>

=back

無事動いたでしょうか？

XXX: 各 url の解説を。

=head2 Emacs integration (recommended)

yatt の設計テーマは B<"use strict" のあるテンプレートエンジン> です。
つまり、綴り間違いが実行前に、静的解析で検知出来ることが最大の売りです。

この yatt のメリットを享受するためには、
エディタに静的検査コマンドを連動させる必要が有ります。

XXX: readme からここへ

=head1 TOUR2: How to write yatt widgets and compose them.



=head1 TOUR3:

=head1 

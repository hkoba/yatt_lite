YATT::Lite version 0.0.3
==================

  YATT is Yet Another Template Toolkit, aimed at Web Designers, rather than
  well-trained programmers. To achieve this goal, YATT provides more
  readable syntax for HTML/XML savvy designers, ``lint'' for static syntax
  checking and many safer default behaviors, ie. automatic output escaping
  based on argument type declaration and file extension based visibility
  handling of template.

  YATT::Lite is template-syntax-compatible, lightweight, full rewrite of
  YATT with superior functionalities.

  In YATT, basic building block is called ``widget''. Template text is
  treated as a sequence of ``widget definition'', each of which is leaded by
  ``widget declaration: <!yatt:widget>'', like multipart email.

  A widget is translated into a perl subroutine (on memory, currently).  A
  template text is translated into a perl package (class). The translation
  is per-template basis and occurs on demand of widget. Template can be
  given to YATT::Lite as a data(string/hash), filename or directory name.

  Package name of template is automatically generated with respect to
  option and filepath. If template is loaded from filesystem, it is cached
  and reloaded if modified.

  Although widget is basically 'named', head of each template text can be a
  ``unnamed (default) widget'', so that designers can treat a template file
  itself as a widget. This means plain HTML files *just works* as template set.

    In future, mainline YATT will incorporate YATT::Lite interface. It
  means, today, if you want to adapt next generation YATT before its
  release, write your script using YATT::Lite.

  This is (still) alpha release. Although template syntax and facade(YATT::Lite)
  API became stable (I want), internal modules are *open* for discussion.


INSTALLATION

  Its all pure Perl, so its ok to put the .pm files (or YATT directory tree)
  in their appropriate local Perl subdirectories.
  (But see NON-STANDARD DIRECTORY STRUCTURE)

  The easiest way to install this distribution is:

    ./runyatt.lib/YATT/scripts/setup.zsh $TARGET_DIR

  This will copy runyatt.cgi, mkdir runyatt.lib, symlink YATT in it and
  create .htaccess for extension mapping. (Note: sorry, it needs Zsh)

  Alternative, by-hand way is like:

    cd $TARGET_DIR
    ln -vnsf $DIST_DIR/runyatt.lib .
    install -m 755 $DIST_DIR/runyatt.cgi .

    # Then, map *.yatt to runyatt.cgi, like this:
    echo AddHandler x-yatt-handler .yatt .ydo > .htaccess
    echo Action x-yatt-handler $URL/runyatt.cgi >> .htaccess

NON-STANDARD DIRECTORY STRUCTURE

  Unfortunately, YATT::Lite distribution doesn't conform
  CPAN style standard directory structure. This is experimental,
  but intentional. Because:

  [1] Engine(modules) and support scripts should be directory bundled together.
      To achieve this, scripts/* and elisp/* is placed in YATT/.

  [2] Since YATT::Lite is still evolving, single (system-wide) installation
      may not fit for multi-service site. To isolate instability risk,
      individual service should have its own installation of engine.
      To achieve this, runyatt.cgi uses runyatt.lib first.

SUPPORT AND DOCUMENTATION

  You can also look for Source Code Repository at:

        http://github.com/hkoba/yatt_lite
        git://github.com/hkoba/yatt_lite.git


COPYRIGHT AND LICENCE

Copyright (C) 2007..2010 "KOBAYASI, Hiroaki"

This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.

#!/usr/bin/env perl
use strict;
use warnings FATAL => qw(all);

sub MY () {__PACKAGE__}

use FindBin;
use lib "$FindBin::Bin/lib";
use File::Basename;

use encoding qw(:locale);

use CGI;
use YATT::Lite::Factory;
use YATT::Lite qw(*YATT *CON);
use YATT::Lite::Util::CmdLine qw(parse_opts parse_params);
use YATT::Lite::Util qw(rootname get_locale_encoding);
use YATT::Lite::Breakpoint;
# XXX: 各ディレクトリに .htyattcf.xhf が有ったら？ rc が有ったら?
# XXX: それらが無い状態で、 Web::* 環境での動作検証をしたいときは？

MY->parse_opts(\@ARGV, \ my %opts);
MY->parse_params(\@ARGV, \ my %common);

my $direct_mode = delete $opts{direct};

my $dispatcher = do {
    require YATT::Lite::Web::Dispatcher;
    YATT::Lite::Web::Dispatcher->new
	(appns => 'MyApp'
	 , namespace => ['yatt', 'perl', 'js']
	 , header_charset => 'utf-8'
	 # , tmpldirs => [grep {-d} rootname($libdir).".ytmpl"]
	 , debug_cgen => $ENV{DEBUG}
	 , debug_cgi  => $ENV{DEBUG_CGI}
	 # , $ENV{LANG} ? (output_encoding => get_locale_encoding()) : ()
	 # , is_gateway => $ENV{GATEWAY_INTERFACE} # Too early for FastCGI.
	 # , tmpl_encoding => 'utf-8'
	);
};

# [1] Compile all.
my @command;
{
  while (@ARGV) {
    my $file = shift @ARGV;
    my %param = %common;
    MY->parse_params(\@ARGV, \%param);

    my $dir = dirname($file);
    $dir =~ s,/*$,/,;
    my $dirhandler = $dispatcher->get_dirhandler($dir)
      or die "Can't find dirhandler for $dir";
    # XXX: そもそも、ここでの DONE に疑問が.
    local $dirhandler->{cf_at_done} = sub {
      # ここで at_done が呼ばれるのは error_handler からだけ。
      exit;
    };

    my $trans = $dirhandler->open_trans;

    my ($part, $sub, $pkg) = $trans->find_part_handler(basename($file));
    # XXX: cgi mode.
    push @command, [$dirhandler, $file, $sub, $pkg
		    , $part->reorder_hash_params(\%param)];
  }
}

# [2] Execute all.

foreach my $cmd (@command) {
  my ($dirhandler, $file, $sub, $this, @args) = @$cmd;
  local $YATT = $dirhandler;
  local $dirhandler->{cf_at_done} = sub {};
  # $dirhandler->fconfigure_encoding(\*STDOUT, \*STDERR);
  local $CON = $dirhandler->make_connection
    (\*STDOUT, cgi => CGI->new({}), file => $file);
  $sub->($this, $CON, @args);
}

exit;
# exit 1 if $nerror;

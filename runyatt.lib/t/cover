#!/usr/bin/perl

#========================================
# This script is slightly modified version of 'cover' of Devel::Cover.
# This modification aims to:
# 1. To avoid unwanted escaping of multibyte char.
# 2. To make sure lib/t/*.t is ignored from summary calculation.
#
# Original copyright is following:

# Copyright 2001-2008, Paul Johnson (pjcj@cpan.org)

# This software is free.  It is licensed under the same terms as Perl itself.

# The latest version of this software should be available from my homepage:
# http://www.pjcj.net
#========================================

require 5.6.1;

use strict;
use warnings;

our $VERSION = "0.64";

use Devel::Cover::DB 0.64;

use Config;
use Cwd "abs_path";
use Data::Dumper;
use File::Find ();
use File::Path;
use FindBin '$Bin';
use Getopt::Long;
use Pod::Usage;

my $Options =
{
    add_uncoverable_point    => [],
    delete_uncoverable_point => [],
    annotation               => [],
    coverage                 => [],
    delete                   => 0,
    gcov                     => $Config{gccversion},
    ignore                   => [],
    ignore_re                => [],
    select                   => [],
    select_re                => [],
    report                   => "",
    summary                  => 1,
    uncoverable_file         => [".uncoverable", glob("~/.uncoverable")],
};

sub get_options
{
    Getopt::Long::Configure("pass_through");
    die "Bad option" unless
        GetOptions($Options,            # Store the options in the Options hash.
                   "write:s" => sub
                   {
                       @$Options{qw( write summary )} = ($_[1], 0)
                   },
                   qw(
                       add_uncoverable_point=s
                       annotation=s
                       clean_uncoverable_points!
                       coverage=s
                       delete!
                       delete_uncoverable_point=s
                       dump_db!
                       gcov!
                       help|h!
                       ignore_re=s
                       ignore=s
                       info|i!
                       outputdir=s
                       report=s
                       select_re=s
                       select=s
                       silent!
                       summary!
                       test!
                       uncoverable_file=s
                       version|v!
		       charset=s
                     ));
    Getopt::Long::Configure("nopass_through");
    $Options->{report} ||= "html" unless exists $Options->{write};
}

sub delete_db
{
    for my $del (@_)
    {
        print "Deleting database $del\n" unless $Options->{silent};
        my $db = Devel::Cover::DB->new(db => $del);
        unless ($db->is_valid)
        {
            print "Devel::Cover: $del is an invalid database - ignoring\n"
                unless $Options->{silent};
            next;
        }
        $db->delete;
        rmtree($del);
    }
}

# Decide whether to run ./Build test or make test
sub test_command { -e "Build.PL" ? mb_test_command() : mm_test_command() }

# Compiler arguments necessary to do a coverage run
sub gcov_args { "-fprofile-arcs\\ -ftest-coverage" }

# Test command for MakeMaker
sub mm_test_command
{
    my $test = "make test";

    if ($Options->{gcov})
    {
        my $o = gcov_args();
        $test .= " OPTIMIZE=-O0\\ $o OTHERLDFLAGS=$o";
    }

    $test
}

# Test command for Module::Build
sub mb_test_command
{
    my $test = './Build test';

    if ($Options->{gcov})
    {
        my $o = gcov_args();
        $test .= " --extra_compiler_flags=-O0\\ $o --extra_linker_flags=$o";
    }

    $test
}

sub main
{
    if ($INC{"Devel/Cover.pm"})
    {
        my $err = "$0 shouldn't be run with coverage turned on.\n";
        eval
        {
            require POSIX;
            print STDERR $err;
            POSIX::_exit(1);
        };
        die $err;
    }

    get_options;
    if (my $charset = $Options->{charset}) {
      require CGI;
      CGI::self_or_default()->charset($charset);
    }

    $Devel::Cover::Silent = 1 if $Options->{silent};

    my $format = "Devel::Cover::Report::\u$Options->{report}";
    if (length $Options->{report})
    {
        eval ("use $format");
        if ($@)
        {
            print "Error: $Options->{report} ",
                  "is not a recognised output format\n\n$@";
            exit 1;
        }
    }

    $format->get_options($Options) if $format->can("get_options");

    $Options->{annotations} = [];
    for my $a (@{$Options->{annotation}})
    {
        my $annotation = "Devel::Cover::Annotation::\u$a";
        eval ("use $annotation");
        if ($@)
        {
            print "Error: $a is not a recognised annotation\n\n$@";
            exit 1;
        }
        my $ann = $annotation->new;
        $ann->get_options($Options) if $ann->can("get_options");
        push @{$Options->{annotations}}, $ann;
    }

    print "$0 version $VERSION\n" and exit 0 if $Options->{version};
    pod2usage(-exitval => 0, -verbose => 1)  if $Options->{help};
    pod2usage(-exitval => 0, -verbose => 2)  if $Options->{info};

    my $dbname = Cwd::abs_path(@ARGV ? shift @ARGV : "cover_db");
    die "Can't open database $dbname\n"
        if !$Options->{delete} && !$Options->{test} && !-d $dbname;

    $Options->{outputdir} = $dbname unless exists $Options->{outputdir};
    my $od = Cwd::abs_path($Options->{outputdir});
    $Options->{outputdir} = $od if defined $od;
    mkpath($Options->{outputdir}) unless -d $Options->{outputdir};

    if ($Options->{delete})
    {
        delete_db($dbname, @ARGV);
        exit 0
    }

    if ($Options->{test})
    {
        # TODO - make this a little robust
        # system "$^X Makefile.PL" unless -e "Makefile";
        delete_db($dbname, @ARGV);
        local $ENV{ -d "t" ? "HARNESS_PERL_SWITCHES" : "PERL5OPT" } =
            "-MDevel::Cover";

        my $test = test_command();

        # touch the XS, C and H files so they rebuild
        if ($Options->{gcov})
        {
            my $t = $] > 5.7 ? undef : time;
            my $xs = sub { utime $t, $t, $_ if /\.(xs|c|h)$/ };
            File::Find::find({ wanted => $xs, no_chdir => 0 }, ".");
        }
        print STDERR "cover: running $test\n";
        system $test;
        $Options->{report} ||= "html";
    }

    if ($Options->{gcov})
    {
        my $gc = sub
        {
            return unless /\.(xs|c|h)$/;

            # Don't bother running gcov if there's no index files.
            # Otherwise it's noisy.
            my $graph_file = $_;
            $graph_file =~ s{\.\w+$}{.gcno};
            return unless -e $graph_file;

            my $c = "gcov $_";
            print STDERR "cover: running $c\n";
            system $c;
        };
        File::Find::find({ wanted => $gc, no_chdir => 0 }, ".");
        my @gc;
        my $gp = sub
        {
            return unless /\.gcov$/;
            my $xs = $_;
            return if $xs =~ s/\.(c|h)\.gcov$/.xs.gcov/ && -e $xs;
            s/^\.\///;
            push @gc, $_;
        };
        File::Find::find({ wanted => $gp, no_chdir => 1 }, ".");
        if (@gc)
        {
            my $c = "gcov2perl @gc";
            print STDERR "cover: running $c\n";
            system $c;
        }
    }

    print "Reading database from $dbname\n" unless $Options->{silent};
    my $db = Devel::Cover::DB->new
    (
        db               => $dbname,
        uncoverable_file => $Options->{uncoverable_file},
    );
    $db = $db->merge_runs;

    $db->add_uncoverable     ($Options->{add_uncoverable_point}   );
    $db->delete_uncoverable  ($Options->{delete_uncoverable_point});
    $db->clean_uncoverable if $Options->{clean_uncoverable_points} ;
    exit 0 if @{$Options->{add_uncoverable_point}}    ||
              @{$Options->{delete_uncoverable_point}} ||
              $Options->{clean_uncoverable_points};

    for my $merge (@ARGV)
    {
        print "Merging database from $merge\n" unless $Options->{silent};
        my $mdb = Devel::Cover::DB->new(db => $merge);
        $mdb = $mdb->merge_runs;
        $db->merge($mdb);
    }

    if ($Options->{dump_db})
    {
        my $d = Data::Dumper->new([$db], ["db"]);
        $d->Indent(1);
        $d->Sortkeys(1) if $] >= 5.008;
        print $d->Dump;
        my $structure = Devel::Cover::DB::Structure->new(base => $dbname);
        $structure->read_all;
        my $s = Data::Dumper->new([$structure], ["structure"]);
        $s->Indent(1);
        $s->Sortkeys(1) if $] >= 5.008;
        print $s->Dump;
        exit 0
    }

    if (exists $Options->{write})
    {
        $dbname = $Options->{write} if length $Options->{write};
        print "Writing database to $dbname\n" unless $Options->{silent};
        $db->write($dbname);
    }

    return unless $Options->{summary} || $Options->{report};

    #========================================
    my %f = map { $_ => 1 } (@{$Options->{select}}
                             ? map glob, @{$Options->{select}}
                             : $db->cover->items);
    delete @f{map glob, @{$Options->{ignore}}};

    my $keep = sub
    {
        my ($f) = @_;
        # return 0 unless exists $db->{summary}{$_};
        for (@{$Options->{ignore_re}})
        {
            return 0 if $f =~ /$_/
        }
        for (@{$Options->{select_re}})
        {
            return 1 if $f =~ /$_/
        }
        !@{$Options->{select_re}}
    };
    my @selected = @{$Options->{file}} = sort grep $keep->($_), keys %f;

    #========================================

    $Options->{coverage}    = [ $db->collected ] unless @{$Options->{coverage}};
    $Options->{show}        = { map { $_ => 1 } @{$Options->{coverage}} };
    $Options->{show}{total} = 1 if keys %{$Options->{show}};

    # $db->calculate_summary(map { $_ => 1 } @{$Options->{coverage}});
  CALC:
    { # Stolen from Devel::Cover::DB::calculate_summary.
      my $self = $db;
      my %options = map { $_ => 1 } @{$Options->{coverage}};

      # last if exists $self->{summary} && !$options{force};
      my $s = $self->{summary} = {};

      for my $file (@selected) {
        $self->cover->get($file)->calculate_summary($self, $file, \%options);
      }

      # use Data::Dumper; print STDERR Dumper $self;

      for my $file (@selected) {
        $self->cover->get($file)->calculate_percentage($self, $s->{$file});
      }

      my $t = $self->{summary}{Total};
      for my $criterion ($self->criteria) {
        next unless exists $t->{$criterion};
        my $c = "Devel::Cover::\u$criterion";
        $c->calculate_percentage($self, $t->{$criterion});
      }
      Devel::Cover::Criterion->calculate_percentage($self, $t->{total});
    }

    print "\n\n" unless $Options->{silent};

    # $db->print_summary(@{$Options->{coverage}}) if $Options->{summary};

    return unless length $Options->{report};

    # use Data::Dumper;  $Data::Dumper::Indent = 1; print Dumper $db->cover;

    # TODO - The sense of select and ignore should be reversed to match
    # collection.

    $format->report($db, $Options)
}

main

__END__

=head1 NAME

cover - report coverage statistics

=head1 SYNOPSIS

 cover -help -info -version
       -summary -report report_format -outputdir dir
       -select filename -ignore filename
       -select_re RE -ignore_re RE
       -write [db] -delete -dump_db
       -silent
       -coverage criterion
       -test -gcov
       -add_uncoverable_point -delete_uncoverable_point
       -clean_uncoverable_points -uncoverable_file
       [report specific options]
       coverage_database [coverage_database ...]

=head1 DESCRIPTION

Report coverage statistics in a variety of formats.

The summary option produces a short textual summary.  Other reports are
available by using the report option.

The following reports are currently available:

 text                  - detailed textual summary
 html                  - detailed HTML reports

=head1 OPTIONS

The following command line options are supported:

 -h -help              - show help
 -i -info              - show documentation
 -v -version           - show version

 -silent               - don't print informational messages (default off)
 -summary              - give summary report                (default on)
 -report report_format - report format                      (default html)
 -outputdir            - directory for output               (default db)

 -select filename      - only report on the file            (default all)
 -ignore filename      - don't report on the file           (default none)
 -select_re RE         - append to REs of files to select   (default none)
 -ignore_re RE         - append to REs of files to ignore   (default none)
 -write [db]           - write the merged database          (default off)
 -delete               - drop database(s)                   (default off)
 -dump_db              - dump database(s) (for debugging)   (default off)

 -coverage criterion   - report on criterion  (default all available)

 -test                 - drop database(s) and run make test (default off)
 -gcov                 - run gcov to cover XS code     (default on if using gcc)

 other options specific to the report

=head1 DETAILS

Any number of coverage databases may be specified on the command line.
These databases will be merged and the reports will be based on the
merged information.  If no databases are specified the default database
(cover_db) will be used.

The -write option will write out the merged database.  If no name is
given for the new database, the first database read in will be
overwritten.  When this option is used no reports are generated by
default.

Specify -select and -ignore options to report on specific files.
Specify -coverage options to report on specific criteria.  By default
all available information on all criteria in all files will be reported.

The -test option will delete the databases and run make test to generate
new coverage data before reporting on it.  The -gcov option will try to
run gcov on any XS code.  This requires that you are using gcc of
course.  If you are this option will be turned on by default.

=head1 EXIT STATUS

The following exit values are returned:

0   All operations were completed successfully.

>0  An error occurred.

=head1 SEE ALSO

 Devel::Cover

=head1 BUGS

Did I mention that this is alpha code?

See the BUGS file.

=head1 VERSION

Version 0.64 - 10th April 2008

=head1 LICENCE

Copyright 2001-2008, Paul Johnson (pjcj@cpan.org)

This software is free.  It is licensed under the same terms as Perl itself.

The latest version of this software should be available from my homepage:
http://www.pjcj.net

=cut

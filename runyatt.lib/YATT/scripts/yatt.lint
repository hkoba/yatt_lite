#!/usr/bin/env perl
use strict;
use warnings FATAL => qw(all);
sub MY () {__PACKAGE__}
use base qw(File::Spec);

use File::Basename;
sub updir {my ($n, $fn) = @_; $fn = dirname($fn) while $n-- > 0; $fn}
my $libdir;
use lib $libdir = do {
  if (-l __FILE__) {
    # If $script is symlink, symlink-resolved path is used as $libdir
    require FindBin; import FindBin;
    updir(2, ($FindBin::RealBin, $FindBin::RealBin)[0])
  } else {
    # Otherwise, just use updir 3 of runyatt.lib/YATT/scripts/$script
    updir(3, MY->rel2abs(__FILE__))
  }
};
# print STDERR join("\n", __FILE__, $libdir), "\n";

use YATT::Lite::Breakpoint;
use YATT::Lite::Util qw(default rootname);
use YATT::Lite::Error;
# XXX: 各ディレクトリに .htyattcf.xhf が有ったら？ rc が有ったら?
# XXX: それらが無い状態で、 Web::* 環境での動作検証をしたいときは？

# library の追加は？ <= .htyattrc で？違うよね?

my $dispatcher = do {
  (my $cgi = $libdir) =~ s/\.\w+$/.cgi/;
  if (-r $cgi) {
    YATT::Lite::Factory->load_factory_script($cgi);
  } else {
    require YATT::Lite::Web::Dispatcher;
    YATT::Lite::Web::Dispatcher->new
	(basens => 'MyApp'
	 , namespace => ['yatt', 'perl', 'js']
	 , header_charset => 'utf-8'
	 , tmpldirs => [grep {-d} rootname($libdir).".ytmpl"]
	 , debug_cgen => $ENV{DEBUG}
	 , debug_cgi  => $ENV{DEBUG_CGI}
	 # , is_gateway => $ENV{GATEWAY_INTERFACE} # Too early for FastCGI.
	 # , tmpl_encoding => 'utf-8'
	);
  }

};

my $nerror = 0;
foreach my $fn (@ARGV) {
  my $dir = dirname($fn);
  my $dirhandler = $dispatcher->get_dirhandler($dir);
  $dirhandler->fconfigure_encoding(\*STDOUT, \*STDERR);
  $dirhandler->configure
    (error_handler => sub {
       (my $type, my YATT::Lite::Error $err) = splice @_, 0, 2;
       my @lineinfo = ("[file] ".default($err->{cf_tmpl_file}, '-')
		       , "[line] ".default($err->{cf_tmpl_line}, '-'));
       my $msg = $type . " [@lineinfo]\n "
	 .sprintf($err->{cf_format}, @{$err->{cf_args}});
       $msg .= "\n" unless $msg =~ m{\n\Z};
       print STDERR $msg;
       exit 1;
     });
  my $trans = $dirhandler->open_trans;
  my $tmpl = $trans->find_file(basename($fn)) or do {
    warn "No such file: $fn\n";
    $nerror++;
    next;
  };
  my $pkg = $trans->find_product(perl => $tmpl);
}

exit 1 if $nerror;
